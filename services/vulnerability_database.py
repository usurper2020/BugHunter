import os
import json
from datetime import datetime
from typing import Dict, List, Optional
import requests

class VulnerabilityDatabase:
    """Manages vulnerability information and updates"""
    
    def __init__(self):
        self.db_dir = os.path.join('data', 'vulnerability_db')
        self.cache_dir = os.path.join(self.db_dir, 'cache')
        os.makedirs(self.db_dir, exist_ok=True)
        os.makedirs(self.cache_dir, exist_ok=True)
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        
    def update_database(self) -> Dict:
        """Update the vulnerability database"""
        try:
            last_update = self._get_last_update_time()
            current_time = datetime.now()
            
            # Fetch updates from NVD
            params = {
                "lastModStartDate": last_update.strftime("%Y-%m-%dT%H:%M:%S:000 UTC-00:00")
            }
            
            response = requests.get(self.nvd_api_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            # Process and save new vulnerabilities
            for vuln in data.get('vulnerabilities', []):
                self._save_vulnerability(vuln)
                
            # Update last update time
            self._save_last_update_time(current_time)
            
            return {
                "status": "success",
                "message": "Database updated successfully",
                "new_entries": len(data.get('vulnerabilities', []))
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
            
    def search_vulnerabilities(
        self,
        query: str,
        severity: Optional[str] = None,
        cwe: Optional[str] = None
    ) -> Dict:
        """Search for vulnerabilities"""
        try:
            results = []
            for filename in os.listdir(self.cache_dir):
                if not filename.endswith('.json'):
                    continue
                    
                with open(os.path.join(self.cache_dir, filename)) as f:
                    vuln = json.load(f)
                    
                # Apply filters
                if not self._matches_filters(vuln, query, severity, cwe):
                    continue
                    
                results.append(vuln)
                
            return {
                "status": "success",
                "results": results
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
            
    def get_vulnerability(self, cve_id: str) -> Dict:
        """Get details for a specific vulnerability"""
        try:
            file_path = os.path.join(self.cache_dir, f"{cve_id}.json")
            if not os.path.exists(file_path):
                # Try to fetch from NVD if not in cache
                return self._fetch_vulnerability(cve_id)
                
            with open(file_path) as f:
                vuln = json.load(f)
                
            return {
                "status": "success",
                "vulnerability": vuln
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
            
    def get_statistics(self) -> Dict:
        """Get database statistics"""
        try:
            total_vulns = len([f for f in os.listdir(self.cache_dir) if f.endswith('.json')])
            
            severity_counts = {
                "CRITICAL": 0,
                "HIGH": 0,
                "MEDIUM": 0,
                "LOW": 0
            }
            
            cwe_counts = {}
            
            for filename in os.listdir(self.cache_dir):
                if not filename.endswith('.json'):
                    continue
                    
                with open(os.path.join(self.cache_dir, filename)) as f:
                    vuln = json.load(f)
                    
                # Count by severity
                severity = vuln.get('severity', 'UNKNOWN')
                if severity in severity_counts:
                    severity_counts[severity] += 1
                    
                # Count by CWE
                cwe = vuln.get('cwe', 'UNKNOWN')
                cwe_counts[cwe] = cwe_counts.get(cwe, 0) + 1
                
            return {
                "status": "success",
                "statistics": {
                    "total_vulnerabilities": total_vulns,
                    "by_severity": severity_counts,
                    "by_cwe": cwe_counts,
                    "last_update": self._get_last_update_time().strftime("%Y-%m-%d %H:%M:%S")
                }
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
            
    def _get_last_update_time(self) -> datetime:
        """Get the last database update time"""
        try:
            with open(os.path.join(self.db_dir, 'last_update.txt')) as f:
                return datetime.fromisoformat(f.read().strip())
        except:
            return datetime(2000, 1, 1)  # Default to old date if no update file
            
    def _save_last_update_time(self, timestamp: datetime):
        """Save the last database update time"""
        with open(os.path.join(self.db_dir, 'last_update.txt'), 'w') as f:
            f.write(timestamp.isoformat())
            
    def _save_vulnerability(self, vuln: Dict):
        """Save a vulnerability to the cache"""
        cve_id = vuln.get('cve', {}).get('id')
        if not cve_id:
            return
            
        file_path = os.path.join(self.cache_dir, f"{cve_id}.json")
        with open(file_path, 'w') as f:
            json.dump(vuln, f, indent=2)
            
    def _fetch_vulnerability(self, cve_id: str) -> Dict:
        """Fetch a vulnerability from NVD"""
        try:
            response = requests.get(f"{self.nvd_api_url}?cveId={cve_id}")
            response.raise_for_status()
            
            data = response.json()
            if not data.get('vulnerabilities'):
                return {
                    "status": "error",
                    "message": "Vulnerability not found"
                }
                
            vuln = data['vulnerabilities'][0]
            self._save_vulnerability(vuln)
            
            return {
                "status": "success",
                "vulnerability": vuln
            }
        except Exception as e:
            return {
                "status": "error",
                "message": str(e)
            }
            
    def _matches_filters(
        self,
        vuln: Dict,
        query: str,
        severity: Optional[str],
        cwe: Optional[str]
    ) -> bool:
        """Check if a vulnerability matches the search filters"""
        # Check query
        if query:
            query = query.lower()
            description = vuln.get('description', '').lower()
            if query not in description:
                return False
                
        # Check severity
        if severity:
            if vuln.get('severity', '').lower() != severity.lower():
                return False
                
        # Check CWE
        if cwe:
            if vuln.get('cwe', '').lower() != cwe.lower():
                return False
                
        return True
