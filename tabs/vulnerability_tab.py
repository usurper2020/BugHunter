"""
Vulnerability tab for the BugHunter application.

This tab provides tools and interfaces for vulnerability scanning and analysis,
with real-time status updates and detailed progress information.
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                           QTextEdit, QPushButton, QSplitter, QProgressBar)
from PyQt6.QtCore import QTimer
from services.vulnerability_scanner import VulnerabilityScanner

class VulnerabilityTab(QWidget):
    """
    Tab widget providing comprehensive vulnerability scanning functionality.
    
    Features:
    - Real-time status updates
    - Progress tracking
    - Detailed scan logs
    - Interactive controls
    """
    
    def __init__(self):
        super().__init__()
        self.scanner = VulnerabilityScanner()
        self.scan_in_progress = False
        self.init_ui()
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.update_status)
        
    def init_ui(self):
        """Initialize the UI components with enhanced status tracking."""
        main_layout = QVBoxLayout()
        
        # Create a splitter for better layout management
        splitter = QSplitter()
        splitter.setOrientation(1)  # Vertical split
        
        # Top panel - Controls and input
        top_panel = QWidget()
        top_layout = QVBoxLayout(top_panel)
        
        # Target input
        self.target_input = QTextEdit()
        self.target_input.setPlaceholderText("Enter target(s) to scan...")
        self.target_input.setMaximumHeight(100)
        top_layout.addWidget(QLabel("Scan Targets:"))
        top_layout.addWidget(self.target_input)
        
        # Control buttons
        button_layout = QHBoxLayout()
        self.scan_button = QPushButton("Run Scan")
        self.scan_button.clicked.connect(self.toggle_scan)
        self.stop_button = QPushButton("Stop Scan")
        self.stop_button.clicked.connect(self.stop_scan)
        self.stop_button.setEnabled(False)
        button_layout.addWidget(self.scan_button)
        button_layout.addWidget(self.stop_button)
        top_layout.addLayout(button_layout)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        top_layout.addWidget(self.progress_bar)
        
        # Bottom panel - Status and results
        bottom_panel = QWidget()
        bottom_layout = QVBoxLayout(bottom_panel)
        
        # Status window
        self.status_window = QTextEdit()
        self.status_window.setReadOnly(True)
        self.status_window.setPlaceholderText("Status messages will appear here...")
        bottom_layout.addWidget(QLabel("Scan Status:"))
        bottom_layout.addWidget(self.status_window)
        
        # Results display
        self.results_display = QTextEdit()
        self.results_display.setReadOnly(True)
        self.results_display.setPlaceholderText("Scan results will appear here...")
        bottom_layout.addWidget(QLabel("Scan Results:"))
        bottom_layout.addWidget(self.results_display)
        
        # Add panels to splitter
        splitter.addWidget(top_panel)
        splitter.addWidget(bottom_panel)
        
        main_layout.addWidget(splitter)
        self.setLayout(main_layout)

    def toggle_scan(self):
        """Start or pause the scan based on current state."""
        if self.scan_in_progress:
            self.pause_scan()
        else:
            self.start_scan()

    def start_scan(self):
        """Start a new vulnerability scan."""
        targets = self.target_input.toPlainText().strip()
        if not targets:
            self.status_window.append("Error: No targets specified")
            return
            
        try:
            self.scan_in_progress = True
            self.status_window.clear()
            self.results_display.clear()
            self.status_window.append("Initializing scan...")
            
            # Configure UI for active scan
            self.scan_button.setText("Pause Scan")
            self.stop_button.setEnabled(True)
            self.progress_bar.setValue(0)
            
            # Start status updates
            self.status_timer.start(500)
            
            # Start the scan in a separate thread
            self.scanner.start_scan(
                targets,
                progress_callback=self.update_progress,
                status_callback=self.update_status,
                result_callback=self.update_results
            )
            
        except Exception as e:
            self.status_window.append(f"Scan initialization failed: {str(e)}")
            self.scan_in_progress = False

    def pause_scan(self):
        """Pause the current scan."""
        self.scanner.pause_scan()
        self.scan_in_progress = False
        self.scan_button.setText("Resume Scan")
        self.status_window.append("Scan paused")

    def stop_scan(self):
        """Stop the current scan."""
        self.scanner.stop_scan()
        self.scan_in_progress = False
        self.scan_button.setText("Run Scan")
        self.stop_button.setEnabled(False)
        self.status_timer.stop()
        self.status_window.append("Scan stopped")
        self.progress_bar.setValue(0)

    def update_progress(self, value):
        """Update the progress bar."""
        self.progress_bar.setValue(value)

    def update_status(self):
        """Update the status window with current scan information."""
        status = self.scanner.get_status()
        self.status_window.append(status)

    def update_results(self, result):
        """Update the results display with new findings."""
        self.results_display.append(result)
