# tests/test_vulnerability_scanner.py
import pytest
import asyncio
from services.vulnerability_scanner import VulnerabilityScanner, ScanTarget
from pathlib import Path
import json

@pytest.fixture
async def scanner():
    scanner = VulnerabilityScanner()
    yield scanner
    # Cleanup after tests
    for scan_id in scanner.active_scans:
        await scanner.stop_scan(scan_id)

@pytest.mark.asyncio
async def test_start_scan(scanner):
    target = ScanTarget(url="example.com")
    scan_id = await scanner.start_scan(target, "full")
    assert scan_id is not None
    assert scan_id in scanner.scan_history
    assert scanner.scan_history[scan_id]['status'] == 'running'

@pytest.mark.asyncio
async def test_stop_scan(scanner):
    target = ScanTarget(url="example.com")
    scan_id = await scanner.start_scan(target, "full")
    await scanner.stop_scan(scan_id)
    assert scanner.scan_history[scan_id]['status'] == 'cancelled'

@pytest.mark.asyncio
async def test_get_scan_results(scanner):
    target = ScanTarget(url="example.com")
    scan_id = await scanner.start_scan(target, "full")
    
    # Wait for scan to complete
    while scanner.scan_history[scan_id]['status'] == 'running':
        await asyncio.sleep(1)
    
    results = await scanner.get_scan_results(scan_id)
    assert 'findings' in results
    assert 'scan_info' in results
